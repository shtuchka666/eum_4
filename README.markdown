# Руководство по стилю JS #

### Отступы ###

Для отступов используйте что-то одно – либо пробелы, либо табуляцию.

### Не комментируй код ###

Комментарии засоряют код. Если комментарии поясняют смысл написанного, то стоит отрефакторить этот кусок кода и сделать его более понятным.

### Объявление переменных ###

Объявляйте переменные в начале логического блока, а не в начале программы.

### Имена переменных и функций ###

Используйте понятные имена функций и переменных, отражающие их смысл. Не старайтесь сократить все слова, лучше пишите слова польностью.

###### Не надо: ######
    function xyz(a, b) {
      return a + b
    }

###### Надо: ######
    function summary(a, b) {
      return a + b
    }

### Равнозначные элементы в алфавитном порядке ###

Если есть список элементов, чей порядок не имеет никакого значения, то лучше расположить их по алфавиту. Например, список импортов лучше сортировать сначала по алфавиту вертикально и горизонтально.

###### Надо: ######

    import {ApolloClient, ApolloProvider, createNetworkInterface} from 'react-apollo'
    import Application from './application'
    import {BrowserRouter} from 'react-router-dom'
    import {createStore} from 'react-redux-boil'
    import React from 'react'
    import ReactDom from 'react-dom'

### Скобки ###

Иногда круглые или фигурные скобки можно не использовать.

###### Не надо: ######

    const addOne = (number) => {  return number + 1 }

###### Надо: ######

    const addOne = number => number + 1

### if-else ###

Не используйте оператор else.
При использовании оператора if, выполняйте код одной строкой и без скобок, но лучше заменять на тернарный оператор.

###### Не надо: ######

    const abs = number => {
      if (number >= 0) {
          return number
      } else {
          return -number
        }
    }

###### Надо: ######

    const abs = number => {
      if (number >= 0) return number
      return -number
    }

###### Лучше: ######

    const abs = number =>
      number >= 0 ? number : -number

### Короткие функции, решающие одну задачу ###

Функции легче поддерживать, если они направлены на решение одной задачи.
    function sumArray(array) {
      return array.reduce((number, currentSum) => number, currentSum)
    }
    function averageArray(array) {
      return sumArray(array) / array.length
    }

### Принцип DRY ###

Старайтесь не повторяться, т.е используйте конструкции, которые позволят сократить повторы одного и того же кода.

### Группировка ###

Группируйте связанные переменные и функции для того, чтобы сделать код понятнее и улучшить его с точки зрения его повторного использования.
